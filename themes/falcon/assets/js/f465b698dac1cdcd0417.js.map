{"version":3,"file":"js/f465b698dac1cdcd0417.js","mappings":"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","sources":["webpack://Falcon-theme/./node_modules/swiper/modules/thumbs/thumbs.js"],"sourcesContent":["import { getDocument } from 'ssr-window';\nimport { elementChildren, isObject } from '../../shared/utils.js';\nexport default function Thumb({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n    if (swiper.params.loop) {\n      swiper.slideToLoop(slideToIndex);\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  }\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper.update();\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n\n    // Activate thumbs\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach(slideEl => {\n          slideEl.classList.add(thumbActiveClass);\n        });\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        if (thumbsSwiper.slides[swiper.realIndex + i]) {\n          thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n        }\n      }\n    }\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      const currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n      if (thumbsSwiper.params.loop) {\n        const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];\n        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {\n          // newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {\n      const document = getDocument();\n      const getThumbsElementAndInit = () => {\n        const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n        if (thumbsElement && thumbsElement.swiper) {\n          thumbs.swiper = thumbsElement.swiper;\n          init();\n          update(true);\n        } else if (thumbsElement) {\n          const onThumbsSwiper = e => {\n            thumbs.swiper = e.detail[0];\n            thumbsElement.removeEventListener('init', onThumbsSwiper);\n            init();\n            update(true);\n            thumbs.swiper.update();\n            swiper.update();\n          };\n          thumbsElement.addEventListener('init', onThumbsSwiper);\n        }\n        return thumbsElement;\n      };\n      const watchForThumbsToAppear = () => {\n        if (swiper.destroyed) return;\n        const thumbsElement = getThumbsElementAndInit();\n        if (!thumbsElement) {\n          requestAnimationFrame(watchForThumbsToAppear);\n        }\n      };\n      requestAnimationFrame(watchForThumbsToAppear);\n    } else {\n      init();\n      update(true);\n    }\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}"],"names":["Thumb","swiper","extendParams","on","initialized","swiperCreated","onThumbClick","thumbsSwiper","clickedIndex","clickedSlide","slideToIndex","init","thumbsParams","SwiperClass","thumbsSwiperParams","update","initial","slidesPerView","thumbsToActivate","thumbActiveClass","slideEl","i","autoScrollOffset","useOffset","currentThumbsIndex","newThumbsIndex","direction","newThumbsSlide","thumbs","document","getThumbsElementAndInit","thumbsElement","onThumbsSwiper","e","watchForThumbsToAppear","_s","duration"],"sourceRoot":""}