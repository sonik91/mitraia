{"version":3,"file":"js/347914a3249f64db92d0.js","mappings":"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","sources":["webpack://Falcon-theme/./node_modules/swiper/modules/free-mode/free-mode.js"],"sourcesContent":["import { elementTransitionEnd, now } from '../../shared/utils.js';\nexport default function freeMode({\n  swiper,\n  extendParams,\n  emit,\n  once\n}) {\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchStart() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper;\n    // Velocity\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n  function onTouchEnd({\n    currentPos\n  }) {\n    const {\n      params,\n      wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper;\n    // Time diff\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        }\n        // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      }\n      // Fix duration\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        elementTransitionEnd(wrapperEl, () => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            elementTransitionEnd(wrapperEl, () => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          elementTransitionEnd(wrapperEl, () => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}"],"names":["freeMode","swiper","extendParams","emit","once","onTouchStart","translate","onTouchMove","data","touches","onTouchEnd","currentPos","params","wrapperEl","rtl","snapGrid","timeDiff","lastMoveEvent","velocityEvent","distance","time","momentumDuration","momentumDistance","newPosition","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","nextSlide","j","moveDistance","currentSlideSize"],"sourceRoot":""}